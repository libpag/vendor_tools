#!/usr/bin/env node
const path = require("path");
const CommandLine = require('./lib/CommandLine');
const Vendor = require('./lib/Vendor');
const Platform = require("./lib/Platform");

const optionDeclarations = [
    {
        name: "source",
        shortName: "s",
        type: "string",
        description: "Specify the source path where the vendor.json is located. Default is current working directory."
    },
    {
        name: "platform",
        shortName: "p",
        type: "string",
        description: "Specifies current platform. Supported platforms: [\"win\", \"mac\", \"ios\", \"linux\", \"android\", \"web\", \"ohos\"]."
    },
    {
        name: "arch",
        shortName: "a",
        type: "string",
        description: "Builds the specified arch only. Supported archs: [\"x86\", \"x64\", \"arm\", \"arm64\", \"arm64-simulator\", \"wasm\", \"wasm-mt\"]."
    },
    {
        name: "output",
        shortName: "o",
        type: "string",
        description: "Publishing all vendor libraries to specified output directory. All shared libraries are copied and all static libraries are merged."
    },
    {
        name: "xcframework",
        shortName: "x",
        type: "boolean",
        description: "Merges all arches of the output libraries into one xcframework if current platform supports it. Ignored if --output is not specified."
    },
    {
        name: "headers",
        type: "string",
        description: "Only valid when xcframework is enabled. Defaults is [source]/include."
    },
    {
        name: "debug",
        shortName: "d",
        type: "boolean",
        description: "Builds with debug mode enabled."
    },
    {
        name: "verbose",
        shortName: "v",
        type: "boolean",
        description: "Prints message in verbose mode."
    },
    {
        name: "help",
        shortName: "h",
        type: "boolean",
        description: "Prints help message."
    },
];

function printHelp(cmd) {
    let output = "";
    output += "Syntax:   " + cmd + " [vendorName] [vendorName]... [options]\n";
    output += "Examples: " + cmd + " libpng libwebp\n";
    output += "Examples: " + cmd + " --debug\n";
    output += "Examples: " + cmd + " -p mac -a arm64 --verbose\n";
    output += CommandLine.printOptions(optionDeclarations);
    process.stdout.write(output);
}

let args = process.argv;
let options = CommandLine.parse(args.slice(2), optionDeclarations);
if (options.help) {
    let cmd = "node " + path.basename(args[1]);
    printHelp(cmd);
    if (options.errors.length > 0) {
        process.exit(1);
    }
    return;
}
if (!options.debug) {
    if (process.env["VENDOR_BUILD_TYPE"] === "Debug") {
        options.debug = true;
    }
}
if (options.xcframework) {
    delete options.arch;
}

if ((!options.headers || options.headers.length == 0) && (options.xcframework || false)) {
    options.headers = path.join(options.source, "include");
}

let execPath = path.resolve(process.argv[1]);
let isCustomBuild = execPath !== __filename;
if (!options.source) {
    options.source = isCustomBuild ? path.dirname(execPath) : process.cwd();
} else {
    options.source = path.resolve(options.source);
}
let configFile = path.join(options.source, "vendor.json");
if (options.output) {
    options.output = path.resolve(options.output);
}
let platform = Platform.Create(options.platform, options.debug, options.verbose);
if (options.arch) {
    platform.archs = [options.arch.toLowerCase()];
}
let headerPath = path.resolve(options.headers);
let vendor = new Vendor(configFile, platform);
vendor.buildAll(options.targets, headerPath, options.output, options.xcframework);
